{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VIcon.css\";\n\n// Composables\nimport { IconValue, useIcon } from \"../../composables/icons.mjs\";\nimport { makeSizeProps, useSize } from \"../../composables/size.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utilities\nimport { computed, Text, toRef } from 'vue';\nimport { convertToUnit, defineComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVIconProps = propsFactory({\n  color: String,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n  ...makeSizeProps(),\n  ...makeTagProps({\n    tag: 'i'\n  }),\n  ...makeThemeProps()\n}, 'v-icon');\nexport const VIcon = defineComponent({\n  name: 'VIcon',\n  props: makeVIconProps(),\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    let slotIcon;\n    if (slots.default) {\n      slotIcon = computed(() => {\n        var _slots$default, _slot$filter$;\n        const slot = (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);\n        if (!slot) return;\n        return (_slot$filter$ = slot.filter(node => node.type === Text && node.children && typeof node.children === 'string')[0]) == null ? void 0 : _slot$filter$.children;\n      });\n    }\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      iconData\n    } = useIcon(slotIcon || props);\n    const {\n      sizeClasses\n    } = useSize(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    useRender(() => {\n      var _slots$default2;\n      return _createVNode(iconData.value.component, {\n        \"tag\": props.tag,\n        \"icon\": iconData.value.icon,\n        \"class\": ['v-icon', 'notranslate', themeClasses.value, sizeClasses.value, textColorClasses.value, {\n          'v-icon--clickable': !!attrs.onClick,\n          'v-icon--start': props.start,\n          'v-icon--end': props.end\n        }],\n        \"style\": [!sizeClasses.value ? {\n          fontSize: convertToUnit(props.size),\n          height: convertToUnit(props.size),\n          width: convertToUnit(props.size)\n        } : undefined, textColorStyles.value],\n        \"role\": attrs.onClick ? 'button' : undefined,\n        \"aria-hidden\": !attrs.onClick\n      }, {\n        default: () => [(_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)]\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"names":["IconValue","useIcon","makeSizeProps","useSize","makeTagProps","makeThemeProps","provideTheme","useTextColor","computed","Text","toRef","convertToUnit","defineComponent","propsFactory","useRender","makeVIconProps","color","String","start","Boolean","end","icon","tag","VIcon","name","props","setup","_ref","attrs","slots","slotIcon","default","_slots$default","_slot$filter$","slot","call","filter","node","type","children","themeClasses","iconData","sizeClasses","textColorClasses","textColorStyles","_slots$default2","_createVNode","value","component","onClick","fontSize","size","height","width","undefined"],"sources":["../../../src/components/VIcon/VIcon.tsx"],"sourcesContent":["// Styles\nimport './VIcon.sass'\n\n// Composables\nimport { IconValue, useIcon } from '@/composables/icons'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, Text, toRef } from 'vue'\nimport { convertToUnit, defineComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef } from 'vue'\n\nexport const makeVIconProps = propsFactory({\n  color: String,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'i' }),\n  ...makeThemeProps(),\n}, 'v-icon')\n\nexport const VIcon = defineComponent({\n  name: 'VIcon',\n\n  props: makeVIconProps(),\n\n  setup (props, { attrs, slots }) {\n    let slotIcon: ComputedRef<string | undefined> | undefined\n    if (slots.default) {\n      slotIcon = computed(() => {\n        const slot = slots.default?.()\n        if (!slot) return\n\n        return slot.filter(node =>\n          node.type === Text && node.children && typeof node.children === 'string'\n        )[0]?.children as string\n      })\n    }\n\n    const { themeClasses } = provideTheme(props)\n    const { iconData } = useIcon(slotIcon || props)\n    const { sizeClasses } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n\n    useRender(() => (\n      <iconData.value.component\n        tag={ props.tag }\n        icon={ iconData.value.icon }\n        class={[\n          'v-icon',\n          'notranslate',\n          themeClasses.value,\n          sizeClasses.value,\n          textColorClasses.value,\n          {\n            'v-icon--clickable': !!attrs.onClick,\n            'v-icon--start': props.start,\n            'v-icon--end': props.end,\n          },\n        ]}\n        style={[\n          !sizeClasses.value ? ({\n            fontSize: convertToUnit(props.size),\n            height: convertToUnit(props.size),\n            width: convertToUnit(props.size),\n          }) : undefined,\n          textColorStyles.value,\n        ]}\n        role={ attrs.onClick ? 'button' : undefined }\n        aria-hidden={ !attrs.onClick }\n      >\n        { slots.default?.() }\n      </iconData.value.component>\n    ))\n\n    return {}\n  },\n})\n\nexport type VIcon = InstanceType<typeof VIcon>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}