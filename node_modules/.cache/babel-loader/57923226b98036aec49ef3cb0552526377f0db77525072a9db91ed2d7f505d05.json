{"ast":null,"code":"// Composables\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\"; // Utilities\nimport { genericComponent } from \"../../util/index.mjs\";\nimport { VSlideGroupSymbol } from \"./VSlideGroup.mjs\"; // Types\nexport const VSlideGroupItem = genericComponent()({\n  name: 'VSlideGroupItem',\n  props: {\n    ...makeGroupItemProps()\n  },\n  emits: {\n    'group:selected': val => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const slideGroupItem = useGroupItem(props, VSlideGroupSymbol);\n    return () => {\n      var _slots$default;\n      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {\n        isSelected: slideGroupItem.isSelected.value,\n        select: slideGroupItem.select,\n        toggle: slideGroupItem.toggle,\n        selectedClass: slideGroupItem.selectedClass.value\n      });\n    };\n  }\n});","map":{"version":3,"names":["makeGroupItemProps","useGroupItem","genericComponent","VSlideGroupSymbol","VSlideGroupItem","name","props","emits","val","setup","_ref","slots","slideGroupItem","_slots$default","default","call","isSelected","value","select","toggle","selectedClass"],"sources":["../../../src/components/VSlideGroup/VSlideGroupItem.tsx"],"sourcesContent":["// Composables\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\n\n// Utilities\nimport { genericComponent } from '@/util'\nimport { VSlideGroupSymbol } from './VSlideGroup'\n\n// Types\nimport type { UnwrapRef } from 'vue'\nimport type { SlotsToProps } from '@/util'\nimport type { GroupItemProvide } from '@/composables/group'\n\nexport const VSlideGroupItem = genericComponent<new () => {\n  $props: SlotsToProps<{\n    default: [{\n      isSelected: UnwrapRef<GroupItemProvide['isSelected']>\n      select: GroupItemProvide['select']\n      toggle: GroupItemProvide['toggle']\n      selectedClass: UnwrapRef<GroupItemProvide['selectedClass']>\n    }]\n  }>\n}>()({\n  name: 'VSlideGroupItem',\n\n  props: {\n    ...makeGroupItemProps(),\n  },\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const slideGroupItem = useGroupItem(props, VSlideGroupSymbol)\n\n    return () => slots.default?.({\n      isSelected: slideGroupItem.isSelected.value,\n      select: slideGroupItem.select,\n      toggle: slideGroupItem.toggle,\n      selectedClass: slideGroupItem.selectedClass.value,\n    })\n  },\n})\n\nexport type VSlideGroupItem = InstanceType<typeof VSlideGroupItem>\n"],"mappings":"AAAA;AAAA,SACSA,kBAAkB,EAAEC,YAAY,uCAEzC;AAAA,SACSC,gBAAgB;AAAA,SAChBC,iBAAiB,6BAE1B;AAKA,OAAO,MAAMC,eAAe,GAAGF,gBAAgB,EAS3C,CAAC;EACHG,IAAI,EAAE,iBAAiB;EAEvBC,KAAK,EAAE;IACL,GAAGN,kBAAkB;EACvB,CAAC;EAEDO,KAAK,EAAE;IACL,gBAAgB,EAAGC,GAAuB,IAAK;EACjD,CAAC;EAEDC,KAAKA,CAAEH,KAAK,EAAAI,IAAA,EAAa;IAAA,IAAX;MAAEC;IAAM,CAAC,GAAAD,IAAA;IACrB,MAAME,cAAc,GAAGX,YAAY,CAACK,KAAK,EAAEH,iBAAiB,CAAC;IAE7D,OAAO;MAAA,IAAAU,cAAA;MAAA,QAAAA,cAAA,GAAMF,KAAK,CAACG,OAAO,qBAAbD,cAAA,CAAAE,IAAA,CAAAJ,KAAK,EAAW;QAC3BK,UAAU,EAAEJ,cAAc,CAACI,UAAU,CAACC,KAAK;QAC3CC,MAAM,EAAEN,cAAc,CAACM,MAAM;QAC7BC,MAAM,EAAEP,cAAc,CAACO,MAAM;QAC7BC,aAAa,EAAER,cAAc,CAACQ,aAAa,CAACH;MAC9C,CAAC,CAAC;IAAA;EACJ;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}