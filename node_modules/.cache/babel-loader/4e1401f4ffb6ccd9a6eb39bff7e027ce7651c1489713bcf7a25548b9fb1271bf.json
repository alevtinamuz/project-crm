{"ast":null,"code":"import { email, required } from \"@vuelidate/validators\";\nimport { useVuelidate } from \"@vuelidate/core\";\nimport CountryService from './service/CountryService';\nexport default {\n  setup: () => ({\n    v$: useVuelidate()\n  }),\n  data() {\n    return {\n      name: '',\n      email: '',\n      password: '',\n      date: null,\n      country: null,\n      accept: null,\n      submitted: false,\n      countries: null,\n      showMessage: false\n    };\n  },\n  countryService: null,\n  validations() {\n    return {\n      name: {\n        required\n      },\n      email: {\n        required,\n        email\n      },\n      password: {\n        required\n      },\n      accept: {\n        required\n      }\n    };\n  },\n  created() {\n    this.countryService = new CountryService();\n  },\n  mounted() {\n    this.countryService.getCountries().then(data => this.countries = data);\n  },\n  methods: {\n    handleSubmit(isFormValid) {\n      this.submitted = true;\n      if (!isFormValid) {\n        return;\n      }\n      this.toggleDialog();\n    },\n    toggleDialog() {\n      this.showMessage = !this.showMessage;\n      if (!this.showMessage) {\n        this.resetForm();\n      }\n    },\n    resetForm() {\n      this.name = '';\n      this.email = '';\n      this.password = '';\n      this.date = null;\n      this.country = null;\n      this.accept = null;\n      this.submitted = false;\n    }\n  }\n};","map":{"version":3,"names":["email","required","useVuelidate","CountryService","setup","v$","data","name","password","date","country","accept","submitted","countries","showMessage","countryService","validations","created","mounted","getCountries","then","methods","handleSubmit","isFormValid","toggleDialog","resetForm"],"sources":["C:\\projectschool\\project-crm\\src\\views\\Register.vue"],"sourcesContent":["<template>\r\n  <div class=\"form-demo\">\r\n      <Dialog v-model:visible=\"showMessage\" :breakpoints=\"{ '960px': '80vw' }\" :style=\"{ width: '30vw' }\" position=\"top\">\r\n          <div class=\"flex align-items-center flex-column pt-6 px-3\">\r\n              <i class=\"pi pi-check-circle\" :style=\"{fontSize: '5rem', color: 'var(--green-500)' }\"></i>\r\n              <h5>Registration Successful!</h5>\r\n              <p :style=\"{lineHeight: 1.5, textIndent: '1rem'}\">\r\n                  Your account is registered under name <b>{{name}}</b> ; it'll be valid next 30 days without activation. Please check <b>{{email}}</b> for activation instructions.\r\n              </p>\r\n          </div>\r\n          <template #footer>\r\n              <div class=\"flex justify-content-center\">\r\n                  <Button label=\"OK\" @click=\"toggleDialog\" class=\"p-button-text\" />\r\n              </div>\r\n          </template>\r\n      </Dialog>\r\n\r\n      <div class=\"flex justify-content-center\">\r\n          <div class=\"card\">\r\n              <h5 class=\"text-center\">Register</h5>\r\n              <form @submit.prevent=\"handleSubmit(!v$.$invalid)\" class=\"p-fluid\">\r\n                  <div class=\"field\">\r\n                      <div class=\"p-float-label\">\r\n                          <InputText id=\"name\" v-model=\"v$.name.$model\" :class=\"{'p-invalid':v$.name.$invalid && submitted}\" />\r\n                          <label for=\"name\" :class=\"{'p-error':v$.name.$invalid && submitted}\">Name*</label>\r\n                      </div>\r\n                      <small v-if=\"(v$.name.$invalid && submitted) || v$.name.$pending.$response\" class=\"p-error\">{{v$.name.required.$message.replace('Value', 'Name')}}</small>\r\n                  </div>\r\n                  <div class=\"field\">\r\n                      <div class=\"p-float-label p-input-icon-right\">\r\n                          <i class=\"pi pi-envelope\" />\r\n                          <InputText id=\"email\" v-model=\"v$.email.$model\" :class=\"{'p-invalid':v$.email.$invalid && submitted}\" aria-describedby=\"email-error\"/>\r\n                          <label for=\"email\" :class=\"{'p-error':v$.email.$invalid && submitted}\">Email*</label>\r\n                      </div>\r\n                      <span v-if=\"v$.email.$error && submitted\">\r\n                          <span id=\"email-error\" v-for=\"(error, index) of v$.email.$errors\" :key=\"index\">\r\n                          <small class=\"p-error\">{{error.$message}}</small>\r\n                          </span>\r\n                      </span>\r\n                      <small v-else-if=\"(v$.email.$invalid && submitted) || v$.email.$pending.$response\" class=\"p-error\">{{v$.email.required.$message.replace('Value', 'Email')}}</small>\r\n                  </div>\r\n                  <div class=\"field\">\r\n                      <div class=\"p-float-label\">\r\n                          <Password id=\"password\" v-model=\"v$.password.$model\" :class=\"{'p-invalid':v$.password.$invalid && submitted}\" toggleMask>\r\n                              <template #header>\r\n                                  <h6>Pick a password</h6>\r\n                              </template>\r\n                              <template #footer=\"sp\">\r\n                                  {{sp.level}}\r\n                                  <Divider />\r\n                                  <p class=\"mt-2\">Suggestions</p>\r\n                                  <ul class=\"pl-2 ml-2 mt-0\" style=\"line-height: 1.5\">\r\n                                      <li>At least one lowercase</li>\r\n                                      <li>At least one uppercase</li>\r\n                                      <li>At least one numeric</li>\r\n                                      <li>Minimum 8 characters</li>\r\n                                  </ul>\r\n                              </template>\r\n                          </Password>\r\n                          <label for=\"password\" :class=\"{'p-error':v$.password.$invalid && submitted}\">Password*</label>\r\n                      </div>\r\n                      <small v-if=\"(v$.password.$invalid && submitted) || v$.password.$pending.$response\" class=\"p-error\">{{v$.password.required.$message.replace('Value', 'Password')}}</small>\r\n                  </div>\r\n                  <div class=\"field\">\r\n                      <div class=\"p-float-label\">\r\n                          <Calendar id=\"date\" v-model=\"date\" :showIcon=\"true\" />\r\n                          <label for=\"date\">Birthday</label>\r\n                      </div>\r\n                  </div>\r\n                  <div class=\"field\">\r\n                      <div class=\"p-float-label\">\r\n                          <Dropdown id=\"country\" v-model=\"country\" :options=\"countries\" optionLabel=\"name\" />\r\n                          <label for=\"country\">Country</label>\r\n                      </div>\r\n                  </div>\r\n                  <div class=\"field-checkbox\">\r\n                      <Checkbox id=\"accept\" name=\"accept\" value=\"Accept\" v-model=\"v$.accept.$model\" :class=\"{'p-invalid':v$.accept.$invalid && submitted}\" />\r\n                      <label for=\"accept\" :class=\"{'p-error': v$.accept.$invalid && submitted}\">I agree to the terms and conditions*</label>\r\n                  </div>\r\n                  <Button type=\"submit\" label=\"Submit\" class=\"mt-2\" />\r\n              </form>\r\n          </div>\r\n      </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { email, required } from \"@vuelidate/validators\";\r\nimport { useVuelidate } from \"@vuelidate/core\";\r\nimport CountryService from './service/CountryService';\r\n\r\nexport default {\r\n  setup: () => ({ v$: useVuelidate() }),\r\n  data() {\r\n      return {\r\n          name: '',\r\n          email: '',\r\n          password: '',\r\n          date: null,\r\n          country: null,\r\n          accept: null,\r\n          submitted: false,\r\n          countries: null,\r\n          showMessage: false\r\n      }\r\n  },\r\n  countryService: null,\r\n  validations() {\r\n      return {\r\n          name: {\r\n              required\r\n          },\r\n          email: {\r\n              required,\r\n              email\r\n          },\r\n          password: {\r\n              required\r\n          },\r\n          accept: {\r\n              required\r\n          }\r\n      }\r\n  },\r\n  created() {\r\n      this.countryService = new CountryService();\r\n  },\r\n  mounted() {\r\n      this.countryService.getCountries().then(data => this.countries = data);\r\n  },\r\n  methods: {\r\n      handleSubmit(isFormValid) {\r\n          this.submitted = true;\r\n\r\n          if (!isFormValid) {\r\n              return;\r\n          }\r\n\r\n          this.toggleDialog();\r\n      },\r\n      toggleDialog() {\r\n          this.showMessage = !this.showMessage;\r\n      \r\n          if(!this.showMessage) {\r\n              this.resetForm();\r\n          }\r\n      },\r\n      resetForm() {\r\n          this.name = '';\r\n          this.email = '';\r\n          this.password = '';\r\n          this.date = null;\r\n          this.country = null;\r\n          this.accept = null;\r\n          this.submitted = false;\r\n      }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.form-demo {\r\n  .card {\r\n      min-width: 450px;\r\n\r\n      form {\r\n          margin-top: 2rem;\r\n      }\r\n\r\n      .field {\r\n          margin-bottom: 1.5rem;\r\n      }\r\n  }\r\n\r\n  @media screen and (max-width: 960px) {\r\n      .card {\r\n          width: 80%;\r\n      }\r\n  }\r\n}\r\n\r\n</style>\r\n\r\n<style lang=\"scss\">\r\n\r\n\r\n\r\n</style>"],"mappings":"AAuFA,SAASA,KAAK,EAAEC,QAAO,QAAS,uBAAuB;AACvD,SAASC,YAAW,QAAS,iBAAiB;AAC9C,OAAOC,cAAa,MAAO,0BAA0B;AAErD,eAAe;EACbC,KAAK,EAAEA,CAAA,MAAO;IAAEC,EAAE,EAAEH,YAAY;EAAG,CAAC,CAAC;EACrCI,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,IAAI,EAAE,EAAE;MACRP,KAAK,EAAE,EAAE;MACTQ,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE,IAAI;MACVC,OAAO,EAAE,IAAI;MACbC,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE,KAAK;MAChBC,SAAS,EAAE,IAAI;MACfC,WAAW,EAAE;IACjB;EACJ,CAAC;EACDC,cAAc,EAAE,IAAI;EACpBC,WAAWA,CAAA,EAAG;IACV,OAAO;MACHT,IAAI,EAAE;QACFN;MACJ,CAAC;MACDD,KAAK,EAAE;QACHC,QAAQ;QACRD;MACJ,CAAC;MACDQ,QAAQ,EAAE;QACNP;MACJ,CAAC;MACDU,MAAM,EAAE;QACJV;MACJ;IACJ;EACJ,CAAC;EACDgB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACF,cAAa,GAAI,IAAIZ,cAAc,EAAE;EAC9C,CAAC;EACDe,OAAOA,CAAA,EAAG;IACN,IAAI,CAACH,cAAc,CAACI,YAAY,EAAE,CAACC,IAAI,CAACd,IAAG,IAAK,IAAI,CAACO,SAAQ,GAAIP,IAAI,CAAC;EAC1E,CAAC;EACDe,OAAO,EAAE;IACLC,YAAYA,CAACC,WAAW,EAAE;MACtB,IAAI,CAACX,SAAQ,GAAI,IAAI;MAErB,IAAI,CAACW,WAAW,EAAE;QACd;MACJ;MAEA,IAAI,CAACC,YAAY,EAAE;IACvB,CAAC;IACDA,YAAYA,CAAA,EAAG;MACX,IAAI,CAACV,WAAU,GAAI,CAAC,IAAI,CAACA,WAAW;MAEpC,IAAG,CAAC,IAAI,CAACA,WAAW,EAAE;QAClB,IAAI,CAACW,SAAS,EAAE;MACpB;IACJ,CAAC;IACDA,SAASA,CAAA,EAAG;MACR,IAAI,CAAClB,IAAG,GAAI,EAAE;MACd,IAAI,CAACP,KAAI,GAAI,EAAE;MACf,IAAI,CAACQ,QAAO,GAAI,EAAE;MAClB,IAAI,CAACC,IAAG,GAAI,IAAI;MAChB,IAAI,CAACC,OAAM,GAAI,IAAI;MACnB,IAAI,CAACC,MAAK,GAAI,IAAI;MAClB,IAAI,CAACC,SAAQ,GAAI,KAAK;IAC1B;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}