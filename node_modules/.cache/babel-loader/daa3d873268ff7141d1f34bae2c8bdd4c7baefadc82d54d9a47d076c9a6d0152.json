{"ast":null,"code":"import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, Fragment as _Fragment, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VBreadcrumbs.css\";\n\n// Components\nimport { VBreadcrumbsDivider } from \"./VBreadcrumbsDivider.mjs\";\nimport { VBreadcrumbsItem } from \"./VBreadcrumbsItem.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\"; // Composables\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\"; // Utilities\nimport { genericComponent, useRender } from \"../../util/index.mjs\";\nimport { toRef } from 'vue';\n\n// Types\n\nexport const VBreadcrumbs = genericComponent()({\n  name: 'VBreadcrumbs',\n  props: {\n    activeClass: String,\n    activeColor: String,\n    bgColor: String,\n    color: String,\n    disabled: Boolean,\n    divider: {\n      type: String,\n      default: '/'\n    },\n    icon: IconValue,\n    items: {\n      type: Array,\n      default: () => []\n    },\n    ...makeDensityProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps({\n      tag: 'ul'\n    })\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'bgColor'));\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    provideDefaults({\n      VBreadcrumbsDivider: {\n        divider: toRef(props, 'divider')\n      },\n      VBreadcrumbsItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor: toRef(props, 'activeColor'),\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled')\n      }\n    });\n    useRender(() => {\n      var _slots$default;\n      const hasPrepend = !!(slots.prepend || props.icon);\n      return _createVNode(props.tag, {\n        \"class\": ['v-breadcrumbs', backgroundColorClasses.value, densityClasses.value, roundedClasses.value],\n        \"style\": backgroundColorStyles.value\n      }, {\n        default: () => [hasPrepend && _createVNode(VDefaultsProvider, {\n          \"key\": \"prepend\",\n          \"defaults\": {\n            VIcon: {\n              icon: props.icon,\n              start: true\n            }\n          }\n        }, {\n          default: () => [_createVNode(\"div\", {\n            \"class\": \"v-breadcrumbs__prepend\"\n          }, [slots.prepend ? slots.prepend() : props.icon && _createVNode(VIcon, null, null)])]\n        }), props.items.map((item, index, array) => _createVNode(_Fragment, null, [_createVNode(VBreadcrumbsItem, _mergeProps({\n          \"key\": index,\n          \"disabled\": index >= array.length - 1\n        }, typeof item === 'string' ? {\n          title: item\n        } : item), {\n          default: slots.title ? () => {\n            var _slots$title;\n            return (_slots$title = slots.title) == null ? void 0 : _slots$title.call(slots, {\n              item,\n              index\n            });\n          } : undefined\n        }), index < array.length - 1 && _createVNode(VBreadcrumbsDivider, null, {\n          default: slots.divider ? () => {\n            var _slots$divider;\n            return (_slots$divider = slots.divider) == null ? void 0 : _slots$divider.call(slots, {\n              item,\n              index\n            });\n          } : undefined\n        })])), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"names":["VBreadcrumbsDivider","VBreadcrumbsItem","VDefaultsProvider","VIcon","IconValue","makeDensityProps","useDensity","makeRoundedProps","useRounded","makeTagProps","provideDefaults","useBackgroundColor","genericComponent","useRender","toRef","VBreadcrumbs","name","props","activeClass","String","activeColor","bgColor","color","disabled","Boolean","divider","type","default","icon","items","Array","tag","setup","_ref","slots","backgroundColorClasses","backgroundColorStyles","densityClasses","roundedClasses","_slots$default","hasPrepend","prepend","_createVNode","value","start","map","item","index","array","_Fragment","_mergeProps","length","title","_slots$title","call","undefined","_slots$divider"],"sources":["../../../src/components/VBreadcrumbs/VBreadcrumbs.tsx"],"sourcesContent":["// Styles\nimport './VBreadcrumbs.sass'\n\n// Components\nimport { VBreadcrumbsDivider } from './VBreadcrumbsDivider'\nimport { VBreadcrumbsItem } from './VBreadcrumbsItem'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { LinkProps } from '@/composables/router'\nimport type { PropType } from 'vue'\nimport type { SlotsToProps } from '@/util'\n\nexport type BreadcrumbItem = string | (LinkProps & {\n  text: string\n  disabled?: boolean\n})\n\nexport const VBreadcrumbs = genericComponent<new <T>() => {\n  $props: {\n    items?: T[]\n  } & SlotsToProps<{\n    prepend: []\n    title: [{ item: T, index: number }]\n    divider: [{ item: T, index: number }]\n    default: []\n  }>\n}>()({\n  name: 'VBreadcrumbs',\n\n  props: {\n    activeClass: String,\n    activeColor: String,\n    bgColor: String,\n    color: String,\n    disabled: Boolean,\n    divider: {\n      type: String,\n      default: '/',\n    },\n    icon: IconValue,\n    items: {\n      type: Array as PropType<BreadcrumbItem[]>,\n      default: () => ([]),\n    },\n\n    ...makeDensityProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps({ tag: 'ul' }),\n  },\n\n  setup (props, { slots }) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n    const { densityClasses } = useDensity(props)\n    const { roundedClasses } = useRounded(props)\n\n    provideDefaults({\n      VBreadcrumbsDivider: {\n        divider: toRef(props, 'divider'),\n      },\n      VBreadcrumbsItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor: toRef(props, 'activeColor'),\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n      },\n    })\n\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.icon)\n\n      return (\n        <props.tag\n          class={[\n            'v-breadcrumbs',\n            backgroundColorClasses.value,\n            densityClasses.value,\n            roundedClasses.value,\n          ]}\n          style={ backgroundColorStyles.value }\n        >\n          { hasPrepend && (\n            <VDefaultsProvider\n              key=\"prepend\"\n              defaults={{\n                VIcon: {\n                  icon: props.icon,\n                  start: true,\n                },\n              }}\n            >\n              <div class=\"v-breadcrumbs__prepend\">\n                { slots.prepend\n                  ? slots.prepend()\n                  : props.icon && (<VIcon />)\n                }\n              </div>\n            </VDefaultsProvider>\n          ) }\n\n          { props.items.map((item, index, array) => (\n            <>\n              <VBreadcrumbsItem\n                key={ index }\n                disabled={ index >= array.length - 1 }\n                { ...(typeof item === 'string' ? { title: item } : item) }\n                v-slots={{\n                  default: slots.title ? () => slots.title?.({ item, index }) : undefined,\n                }}\n              />\n\n              { index < array.length - 1 && (\n                <VBreadcrumbsDivider\n                  v-slots={{\n                    default: slots.divider ? () => slots.divider?.({ item, index }) : undefined,\n                  }}\n                />\n              ) }\n            </>\n          )) }\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VBreadcrumbs = InstanceType<typeof VBreadcrumbs>\n"],"mappings":";AAAA;AACA;;AAEA;AAAA,SACSA,mBAAmB;AAAA,SACnBC,gBAAgB;AAAA,SAChBC,iBAAiB;AAAA,SACjBC,KAAK,8BAEd;AAAA,SACSC,SAAS;AAAA,SACTC,gBAAgB,EAAEC,UAAU;AAAA,SAC5BC,gBAAgB,EAAEC,UAAU;AAAA,SAC5BC,YAAY;AAAA,SACZC,eAAe;AAAA,SACfC,kBAAkB,uCAE3B;AAAA,SACSC,gBAAgB,EAAEC,SAAS;AACpC,SAASC,KAAK,QAAQ,KAAK;;AAE3B;;AAUA,OAAO,MAAMC,YAAY,GAAGH,gBAAgB,EASxC,CAAC;EACHI,IAAI,EAAE,cAAc;EAEpBC,KAAK,EAAE;IACLC,WAAW,EAAEC,MAAM;IACnBC,WAAW,EAAED,MAAM;IACnBE,OAAO,EAAEF,MAAM;IACfG,KAAK,EAAEH,MAAM;IACbI,QAAQ,EAAEC,OAAO;IACjBC,OAAO,EAAE;MACPC,IAAI,EAAEP,MAAM;MACZQ,OAAO,EAAE;IACX,CAAC;IACDC,IAAI,EAAExB,SAAS;IACfyB,KAAK,EAAE;MACLH,IAAI,EAAEI,KAAmC;MACzCH,OAAO,EAAEA,CAAA,KAAO;IAClB,CAAC;IAED,GAAGtB,gBAAgB,EAAE;IACrB,GAAGE,gBAAgB,EAAE;IACrB,GAAGE,YAAY,CAAC;MAAEsB,GAAG,EAAE;IAAK,CAAC;EAC/B,CAAC;EAEDC,KAAKA,CAAEf,KAAK,EAAAgB,IAAA,EAAa;IAAA,IAAX;MAAEC;IAAM,CAAC,GAAAD,IAAA;IACrB,MAAM;MAAEE,sBAAsB;MAAEC;IAAsB,CAAC,GAAGzB,kBAAkB,CAACG,KAAK,CAACG,KAAK,EAAE,SAAS,CAAC,CAAC;IACrG,MAAM;MAAEoB;IAAe,CAAC,GAAG/B,UAAU,CAACW,KAAK,CAAC;IAC5C,MAAM;MAAEqB;IAAe,CAAC,GAAG9B,UAAU,CAACS,KAAK,CAAC;IAE5CP,eAAe,CAAC;MACdV,mBAAmB,EAAE;QACnByB,OAAO,EAAEX,KAAK,CAACG,KAAK,EAAE,SAAS;MACjC,CAAC;MACDhB,gBAAgB,EAAE;QAChBiB,WAAW,EAAEJ,KAAK,CAACG,KAAK,EAAE,aAAa,CAAC;QACxCG,WAAW,EAAEN,KAAK,CAACG,KAAK,EAAE,aAAa,CAAC;QACxCK,KAAK,EAAER,KAAK,CAACG,KAAK,EAAE,OAAO,CAAC;QAC5BM,QAAQ,EAAET,KAAK,CAACG,KAAK,EAAE,UAAU;MACnC;IACF,CAAC,CAAC;IAEFJ,SAAS,CAAC,MAAM;MAAA,IAAA0B,cAAA;MACd,MAAMC,UAAU,GAAG,CAAC,EAAEN,KAAK,CAACO,OAAO,IAAIxB,KAAK,CAACW,IAAI,CAAC;MAElD,OAAAc,YAAA,CAAAzB,KAAA,CAAAc,GAAA;QAAA,SAEW,CACL,eAAe,EACfI,sBAAsB,CAACQ,KAAK,EAC5BN,cAAc,CAACM,KAAK,EACpBL,cAAc,CAACK,KAAK,CACrB;QAAA,SACOP,qBAAqB,CAACO;MAAK;QAAAhB,OAAA,EAAAA,CAAA,MAEjCa,UAAU,IAAAE,YAAA,CAAAxC,iBAAA;UAAA,OAEJ,SAAS;UAAA,YACH;YACRC,KAAK,EAAE;cACLyB,IAAI,EAAEX,KAAK,CAACW,IAAI;cAChBgB,KAAK,EAAE;YACT;UACF;QAAC;UAAAjB,OAAA,EAAAA,CAAA,MAAAe,YAAA;YAAA,SAEU;UAAwB,IAC/BR,KAAK,CAACO,OAAO,GACXP,KAAK,CAACO,OAAO,EAAE,GACfxB,KAAK,CAACW,IAAI,IAAAc,YAAA,CAAAvC,KAAA,aAAe;QAAA,EAIlC,EAECc,KAAK,CAACY,KAAK,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAAN,YAAA,CAAAO,SAAA,SAAAP,YAAA,CAAAzC,gBAAA,EAAAiD,WAAA;UAAA,OAGzBH,KAAK;UAAA,YACAA,KAAK,IAAIC,KAAK,CAACG,MAAM,GAAG;QAAC,GAC9B,OAAOL,IAAI,KAAK,QAAQ,GAAG;UAAEM,KAAK,EAAEN;QAAK,CAAC,GAAGA,IAAI,GAC9C;UACPnB,OAAO,EAAEO,KAAK,CAACkB,KAAK,GAAG;YAAA,IAAAC,YAAA;YAAA,QAAAA,YAAA,GAAMnB,KAAK,CAACkB,KAAK,qBAAXC,YAAA,CAAAC,IAAA,CAAApB,KAAK,EAAS;cAAEY,IAAI;cAAEC;YAAM,CAAC,CAAC;UAAA,IAAGQ;QAChE,CAAC,GAGDR,KAAK,GAAGC,KAAK,CAACG,MAAM,GAAG,CAAC,IAAAT,YAAA,CAAA1C,mBAAA,QAEb;UACP2B,OAAO,EAAEO,KAAK,CAACT,OAAO,GAAG;YAAA,IAAA+B,cAAA;YAAA,QAAAA,cAAA,GAAMtB,KAAK,CAACT,OAAO,qBAAb+B,cAAA,CAAAF,IAAA,CAAApB,KAAK,EAAW;cAAEY,IAAI;cAAEC;YAAM,CAAC,CAAC;UAAA,IAAGQ;QACpE,CAAC,CAEJ,EAEJ,CAAC,GAAAhB,cAAA,GAEAL,KAAK,CAACP,OAAO,qBAAbY,cAAA,CAAAe,IAAA,CAAApB,KAAK,CAAY;MAAA;IAGzB,CAAC,CAAC;IAEF,OAAO,CAAC,CAAC;EACX;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}