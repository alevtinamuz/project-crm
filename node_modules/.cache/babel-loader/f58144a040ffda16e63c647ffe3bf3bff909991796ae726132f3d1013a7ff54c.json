{"ast":null,"code":"// Utils\nimport { SUPPORTS_INTERSECTION } from \"../../util/index.mjs\"; // Types\nfunction mounted(el, binding) {\n  if (!SUPPORTS_INTERSECTION) return;\n  const modifiers = binding.modifiers || {};\n  const value = binding.value;\n  const {\n    handler,\n    options\n  } = typeof value === 'object' ? value : {\n    handler: value,\n    options: {}\n  };\n  const observer = new IntersectionObserver(function () {\n    var _el$_observe;\n    let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let observer = arguments.length > 1 ? arguments[1] : undefined;\n    const _observe = (_el$_observe = el._observe) == null ? void 0 : _el$_observe[binding.instance.$.uid];\n    if (!_observe) return; // Just in case, should never fire\n\n    const isIntersecting = entries.some(entry => entry.isIntersecting);\n\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n    if (handler && (!modifiers.quiet || _observe.init) && (!modifiers.once || isIntersecting || _observe.init)) {\n      handler(isIntersecting, entries, observer);\n    }\n    if (isIntersecting && modifiers.once) unmounted(el, binding);else _observe.init = true;\n  }, options);\n  el._observe = Object(el._observe);\n  el._observe[binding.instance.$.uid] = {\n    init: false,\n    observer\n  };\n  observer.observe(el);\n}\nfunction unmounted(el, binding) {\n  var _el$_observe2;\n  const observe = (_el$_observe2 = el._observe) == null ? void 0 : _el$_observe2[binding.instance.$.uid];\n  if (!observe) return;\n  observe.observer.unobserve(el);\n  delete el._observe[binding.instance.$.uid];\n}\nexport const Intersect = {\n  mounted,\n  unmounted\n};\nexport default Intersect;","map":{"version":3,"names":["SUPPORTS_INTERSECTION","mounted","el","binding","modifiers","value","handler","options","observer","IntersectionObserver","_el$_observe","entries","arguments","length","undefined","_observe","instance","$","uid","isIntersecting","some","entry","quiet","init","once","unmounted","Object","observe","_el$_observe2","unobserve","Intersect"],"sources":["../../../src/directives/intersect/index.ts"],"sourcesContent":["// Utils\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\n// Types\nimport type {\n  DirectiveBinding,\n} from 'vue'\n\ntype ObserveHandler = (\n  isIntersecting: boolean,\n  entries: IntersectionObserverEntry[],\n  observer: IntersectionObserver,\n) => void\n\nexport interface ObserveDirectiveBinding extends Omit<DirectiveBinding, 'modifiers' | 'value'> {\n  value?: ObserveHandler | { handler: ObserveHandler, options?: IntersectionObserverInit }\n  modifiers: {\n    once?: boolean\n    quiet?: boolean\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: ObserveDirectiveBinding) {\n  if (!SUPPORTS_INTERSECTION) return\n\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const { handler, options } = typeof value === 'object'\n    ? value\n    : { handler: value, options: {} }\n\n  const observer = new IntersectionObserver((\n    entries: IntersectionObserverEntry[] = [],\n    observer: IntersectionObserver\n  ) => {\n    const _observe = el._observe?.[binding.instance!.$.uid]\n    if (!_observe) return // Just in case, should never fire\n\n    const isIntersecting = entries.some(entry => entry.isIntersecting)\n\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n    if (\n      handler && (\n        !modifiers.quiet ||\n        _observe.init\n      ) && (\n        !modifiers.once ||\n        isIntersecting ||\n        _observe.init\n      )\n    ) {\n      handler(isIntersecting, entries, observer)\n    }\n\n    if (isIntersecting && modifiers.once) unmounted(el, binding)\n    else _observe.init = true\n  }, options)\n\n  el._observe = Object(el._observe)\n  el._observe![binding.instance!.$.uid] = { init: false, observer }\n\n  observer.observe(el)\n}\n\nfunction unmounted (el: HTMLElement, binding: ObserveDirectiveBinding) {\n  const observe = el._observe?.[binding.instance!.$.uid]\n  if (!observe) return\n\n  observe.observer.unobserve(el)\n  delete el._observe![binding.instance!.$.uid]\n}\n\nexport const Intersect = {\n  mounted,\n  unmounted,\n}\n\nexport default Intersect\n"],"mappings":"AAAA;AAAA,SACSA,qBAAqB,gCAE9B;AAmBA,SAASC,OAAOA,CAAEC,EAAe,EAAEC,OAAgC,EAAE;EACnE,IAAI,CAACH,qBAAqB,EAAE;EAE5B,MAAMI,SAAS,GAAGD,OAAO,CAACC,SAAS,IAAI,CAAC,CAAC;EACzC,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK;EAC3B,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAClDA,KAAK,GACL;IAAEC,OAAO,EAAED,KAAK;IAAEE,OAAO,EAAE,CAAC;EAAE,CAAC;EAEnC,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAC,YAGrC;IAAA,IAAAC,YAAA;IAAA,IAFHC,OAAoC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAA,IACzCJ,QAA8B,GAAAI,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAE9B,MAAMC,QAAQ,IAAAL,YAAA,GAAGR,EAAE,CAACa,QAAQ,qBAAXL,YAAA,CAAcP,OAAO,CAACa,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAC;IACvD,IAAI,CAACH,QAAQ,EAAE,OAAM,CAAC;;IAEtB,MAAMI,cAAc,GAAGR,OAAO,CAACS,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACF,cAAc,CAAC;;IAElE;IACA;IACA,IACEb,OAAO,KACL,CAACF,SAAS,CAACkB,KAAK,IAChBP,QAAQ,CAACQ,IAAI,CACd,KACC,CAACnB,SAAS,CAACoB,IAAI,IACfL,cAAc,IACdJ,QAAQ,CAACQ,IAAI,CACd,EACD;MACAjB,OAAO,CAACa,cAAc,EAAER,OAAO,EAAEH,QAAQ,CAAC;IAC5C;IAEA,IAAIW,cAAc,IAAIf,SAAS,CAACoB,IAAI,EAAEC,SAAS,CAACvB,EAAE,EAAEC,OAAO,CAAC,MACvDY,QAAQ,CAACQ,IAAI,GAAG,IAAI;EAC3B,CAAC,EAAEhB,OAAO,CAAC;EAEXL,EAAE,CAACa,QAAQ,GAAGW,MAAM,CAACxB,EAAE,CAACa,QAAQ,CAAC;EACjCb,EAAE,CAACa,QAAQ,CAAEZ,OAAO,CAACa,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAC,GAAG;IAAEK,IAAI,EAAE,KAAK;IAAEf;EAAS,CAAC;EAEjEA,QAAQ,CAACmB,OAAO,CAACzB,EAAE,CAAC;AACtB;AAEA,SAASuB,SAASA,CAAEvB,EAAe,EAAEC,OAAgC,EAAE;EAAA,IAAAyB,aAAA;EACrE,MAAMD,OAAO,IAAAC,aAAA,GAAG1B,EAAE,CAACa,QAAQ,qBAAXa,aAAA,CAAczB,OAAO,CAACa,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAC;EACtD,IAAI,CAACS,OAAO,EAAE;EAEdA,OAAO,CAACnB,QAAQ,CAACqB,SAAS,CAAC3B,EAAE,CAAC;EAC9B,OAAOA,EAAE,CAACa,QAAQ,CAAEZ,OAAO,CAACa,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAC;AAC9C;AAEA,OAAO,MAAMY,SAAS,GAAG;EACvB7B,OAAO;EACPwB;AACF,CAAC;AAED,eAAeK,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}